{{define "content"}}
<p class="previous">&larr; <a href="/message-privacy-security/">Previous</a></p>
<p class="next"></p>
<p class="date">{{.DateTime.Format "2006-01-02"}}</p>
<h2>{{.Title}}</h2>
<p>I was recently working on an interesting usecase in a Rust project, specifically a Linux PAM library, where we pass a raw pointer to a C function.</p>
<p>For the sake of brevity, the code looks something like this:</p>
<pre><code><span class="red">use</span> <span class="green">std</span>::<span class="green">os</span>::<span class="green">raw</span>::c_uint;

<span class="red">type</span> <span class="orange">SomeT</span> <span class="red">=</span> <span class="orange">*const</span> c_uint;

<span class="red">fn</span> <span class="green">blah</span>(x: SomeT) <span class="red">-></span> c_uint {
    <span class="grey">// Pretend we are passing x to a C function, hence the unsafe.</span>
    <span class="green">unsafe</span> { <span class="orange">*</span>x } 
}
</code></pre>
<p>This disguises the raw pointer behing the <code>SomeT</code> type. Constructing a dangling pointer isn't considered unsafe in itself - but using it is. In Rust, a function like this is considered to be unsound, meaning that undefined behavior is possible from safe code. Therefore, nothing stops us from doing <code>blah(0x1234 as _)</code> and causing a segfault. <a href="https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=e2f83dea25840fbcd21ff4dd4d424ce8">See for yourself.</a></p>
<p>This is because raw pointers are not guaranteed to point to a valid instance of the data they represent, which means that dereferencing them can lead to unaligned or null behaviour - or even worse, a segmentation fault. In severe cases, this could also lead to type confusion where data is misrepresented, thus corrupting the state of a program.</p>
<h3>Potential improvements</h3>
<ul>
	<li>Mark the function as <code>unsafe</code>.</li>
	<li>Create a wrapper around <code>SomeT</code> that ensures the validity of the pointer.</li>
</ul>
<p>Credit to one of my awesome colleagues for pointing this out to me during code review, and introducing me to <a href="https://doc.rust-lang.org/nomicon/">The Rustonomicon</a>.</p>
{{end}}
