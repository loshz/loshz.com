{{define "content"}}
<p class="previous">&larr; <a href="/k8s-service-ports/">Previous</a></p>
<p class="next"><a href="/k8s-migration/">Next</a> &rarr;</p>
<h1>{{.Title}}</h1>
<p class="date">{{.DateTime.Format "2006-01-02"}} &sdot; 3 min read</p>
<p>Kubernetes makes light work of giving us the ability to deploy a canary release.</p>
<p class="quote">Canary release is a technique to wuce the risk of introducing a new software version in production by slowly rolling out the change to a small subset of users before rolling it out to the entire infrastructure and making it available to everybody.</p>
<p class="caption"><a href="https://martinfowler.com/bliki/CanaryRelease.html">https://martinfowler.com/bliki/CanaryRelease.html</a></p>
<p>For example, let's say we want to deploy 4 stable replicas of <code>`my-service`</code> to a cluster. The yaml might look something like this:</p>
<pre class="yaml lines">
<code><span class="r">apiVersion:</span> apps/v1beta2</code>
<code><span class="r">kind:</span> Deployment</code>
<code><span class="r">metadata:</span></code>
<code> <span class="r">name:</span> my-service</code>
<code> <span class="r">labels:</span></code>
<code>   <span class="r">app:</span> my-service</code>
<code><span class="r">spec:</span></code>
<code> <span class="r">replicas:</span> 4</code>
<code> <span class="r">selector:</span></code>
<code>   <span class="r">matchLabels:</span></code>
<code>     <span class="r">app:</span> my-service</code>
<code> <span class="r">template:</span></code>
<code>   <span class="r">metadata:</span></code>
<code>     <span class="r">labels:</span></code>
<code>       <span class="r">app:</span> my-service</code>
<code>       <span class="r">release:</span> stable</code>
<code>   <span class="r">spec:</span></code>
<code>     <span class="r">containers:</span></code>
<code>     - <span class="r">name:</span> my-service</code>
<code>       <span class="r">image:</span> my-service:latest</code>
<code>       <span class="r">command:</span></code>
<code>        - run</code>
<code>        <span class="r">ports:</span></code>
<code>        - <span class="r">containerPort:</span> 6000</code>
</pre>
<p>We can use labels to specify information about a Deployment. (Tip: it's good practice to keep these consistent throughout each service.)</p>
<p>In our Deployment, we use the same <code>`app`</code> label from the metadata in the spec <code>`selector`</code>. The selector field defines how the Deployment finds which Pods to manage.</p>
<p>In order to expose our service to the internet, we can create a Load Balancer in the form of a Service:</p>
<pre class="yaml lines">
<code><span class="r">apiVersion:</span> v1</code>
<code><span class="r">kind:</span> Service</code>
<code><span class="r">metadata:</span></code>
<code> <span class="r">name:</span> my-service</code>
<code> <span class="r">labels:</span></code>
<code>   <span class="r">app:</span> my-service</code>
<code><span class="r">spec:</span></code>
<code> <span class="r">ports:</span></code>
<code> - <span class="r">port:</span> 80</code>
<code>   <span class="r">targetPort:</span> 6000</code>
<code> <span class="r">type:</span> LoadBalancer</code>
<code> <span class="r">selector:</span></code>
<code>   <span class="r">app:</span> my-service</code>
</pre>
<p>Here we will use the same <code>`selector`</code> field to match the <code>`app`</code> label of our Deployment as this enables the Service to route traffic to the correct Pods.</p>
<p>Now it's time to introduce our Canary release. Similarly to our stable build, we will create another Deployment:</p>
<pre class="yaml lines">
<code><span class="r">apiVersion:</span> apps/v1beta2</code>
<code><span class="r">kind:</span> Deployment</code>
<code><span class="r">metadata:</span></code>
<code> <span class="r">name:</span> my-canary-service</code>
<code> <span class="r">labels:</span></code>
<code>   <span class="r">app:</span> my-service</code>
<code><span class="r">spec:</span></code>
<code> <span class="r">replicas:</span> 1</code>
<code> <span class="r">selector:</span></code>
<code>   <span class="r">matchLabels:</span></code>
<code>     <span class="r">app:</span> my-service</code>
<code> <span class="r">template:</span></code>
<code>   <span class="r">metadata:</span></code>
<code>     <span class="r">labels:</span></code>
<code>       <span class="r">app:</span> my-service</code>
<code>       <span class="r">release:</span> canary</code>
<code>   <span class="r">spec:</span></code>
<code>     <span class="r">containers:</span></code>
<code>     - <span class="r">name:</span> my-service</code>
<code>       <span class="r">image:</span> my-service:latest</code>
<code>       <span class="r">command:</span></code>
<code>       - run</code>
<code>       <span class="r">ports:</span></code>
<code>        - <span class="r">containerPort:</span> 6000</code>
</pre>
			<p>However, this time we will use a different name and require only 1 replica, but still use the same labels as our stable build. This allows the Service to route traffic from the Load Balancer to our stable <em>and</em> canary Pods, but gives us the flexibility to control everything about the canary container in isolation.</p>
			<p>As we are now running 5 replicas of our service, in theory, 1 in 5 users should have their request proccessed by the canary build. (Tip: this is not always the case as a Kubernetes Service does not guarantee even distribution of traffic.)</p>
			<h3>Resources</h3>
			<ul>
				<li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">Kubernetes Deployment</a></li>
				<li><a href="https://kubernetes.io/docs/concepts/services-networking/service">Kubernetes Service</a></li>
				<li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">Labels and Selectors</a></li>
			</ul>
{{end}}
